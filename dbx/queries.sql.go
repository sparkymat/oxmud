// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package dbx

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, encrypted_password
) VALUES (
  $1::text, $2::text
) RETURNING id, username, encrypted_password, created_at, updated_at
`

type CreateUserParams struct {
	Username          string
	EncryptedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.EncryptedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchUserByUsername = `-- name: FetchUserByUsername :one
SELECT u.id, u.username, u.encrypted_password, u.created_at, u.updated_at
  FROM users u
  WHERE u.username = $1::text LIMIT 1
`

func (q *Queries) FetchUserByUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
